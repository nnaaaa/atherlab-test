import fs from 'fs';
import { NextRequest, NextResponse } from 'next/server';
import path from 'path';

/**
 * API route to retrieve Merkle proofs for a given Ethereum address
 * This reads from the whitelist.json file generated by the smart contract setup
 * 
 * @param {NextRequest} request - The Next.js request object
 * @returns {NextResponse} - JSON response with the Merkle proof or an error
 */
export async function GET(request: NextRequest) {
  // Get the address from the query parameter
  const searchParams = request.nextUrl.searchParams;
  const address = searchParams.get('address');

  // Validate address
  if (!address || !address.startsWith('0x') || address.length !== 42) {
    return NextResponse.json(
      { error: 'Invalid Ethereum address' },
      { status: 400 }
    );
  }

  try {
    // Path to the whitelist.json file relative to the project root
    const whitelistPath = path.join(process.cwd(), '../smart-contracts/data/whitelist.json');
    
    // Check if file exists
    if (!fs.existsSync(whitelistPath)) {
      return NextResponse.json(
        { error: 'Whitelist data not found' },
        { status: 404 }
      );
    }

    // Read the whitelist data
    const whitelistData = JSON.parse(fs.readFileSync(whitelistPath, 'utf8'));
    
    // Get the proof for the normalized address (lowercase)
    const normalizedAddress = address.toLowerCase();
    const proof = whitelistData.addressToProofMap[normalizedAddress];
    
    if (!proof) {
      return NextResponse.json(
        { error: 'Address not found in whitelist', isWhitelisted: false },
        { status: 404 }
      );
    }
    
    // Return the proof
    return NextResponse.json({
      address: normalizedAddress,
      proof,
      isWhitelisted: true
    });
  } catch (error) {
    console.error('Error retrieving Merkle proof:', error);
    return NextResponse.json(
      { error: 'Failed to retrieve Merkle proof' },
      { status: 500 }
    );
  }
} 